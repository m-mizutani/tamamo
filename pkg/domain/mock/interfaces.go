// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/m-mizutani/tamamo/pkg/domain/interfaces"
	"sync"
)

// Ensure, that SlackClientMock does implement interfaces.SlackClient.
// If this is not the case, regenerate this file with moq.
var _ interfaces.SlackClient = &SlackClientMock{}

// SlackClientMock is a mock implementation of interfaces.SlackClient.
//
//	func TestSomethingThatUsesSlackClient(t *testing.T) {
//
//		// make and configure a mocked interfaces.SlackClient
//		mockedSlackClient := &SlackClientMock{
//			IsBotUserFunc: func(userID string) bool {
//				panic("mock out the IsBotUser method")
//			},
//			PostMessageFunc: func(ctx context.Context, channelID string, threadTS string, text string) error {
//				panic("mock out the PostMessage method")
//			},
//		}
//
//		// use mockedSlackClient in code that requires interfaces.SlackClient
//		// and then make assertions.
//
//	}
type SlackClientMock struct {
	// IsBotUserFunc mocks the IsBotUser method.
	IsBotUserFunc func(userID string) bool

	// PostMessageFunc mocks the PostMessage method.
	PostMessageFunc func(ctx context.Context, channelID string, threadTS string, text string) error

	// calls tracks calls to the methods.
	calls struct {
		// IsBotUser holds details about calls to the IsBotUser method.
		IsBotUser []struct {
			// UserID is the userID argument value.
			UserID string
		}
		// PostMessage holds details about calls to the PostMessage method.
		PostMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChannelID is the channelID argument value.
			ChannelID string
			// ThreadTS is the threadTS argument value.
			ThreadTS string
			// Text is the text argument value.
			Text string
		}
	}
	lockIsBotUser   sync.RWMutex
	lockPostMessage sync.RWMutex
}

// IsBotUser calls IsBotUserFunc.
func (mock *SlackClientMock) IsBotUser(userID string) bool {
	if mock.IsBotUserFunc == nil {
		panic("SlackClientMock.IsBotUserFunc: method is nil but SlackClient.IsBotUser was just called")
	}
	callInfo := struct {
		UserID string
	}{
		UserID: userID,
	}
	mock.lockIsBotUser.Lock()
	mock.calls.IsBotUser = append(mock.calls.IsBotUser, callInfo)
	mock.lockIsBotUser.Unlock()
	return mock.IsBotUserFunc(userID)
}

// IsBotUserCalls gets all the calls that were made to IsBotUser.
// Check the length with:
//
//	len(mockedSlackClient.IsBotUserCalls())
func (mock *SlackClientMock) IsBotUserCalls() []struct {
	UserID string
} {
	var calls []struct {
		UserID string
	}
	mock.lockIsBotUser.RLock()
	calls = mock.calls.IsBotUser
	mock.lockIsBotUser.RUnlock()
	return calls
}

// PostMessage calls PostMessageFunc.
func (mock *SlackClientMock) PostMessage(ctx context.Context, channelID string, threadTS string, text string) error {
	if mock.PostMessageFunc == nil {
		panic("SlackClientMock.PostMessageFunc: method is nil but SlackClient.PostMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ChannelID string
		ThreadTS  string
		Text      string
	}{
		Ctx:       ctx,
		ChannelID: channelID,
		ThreadTS:  threadTS,
		Text:      text,
	}
	mock.lockPostMessage.Lock()
	mock.calls.PostMessage = append(mock.calls.PostMessage, callInfo)
	mock.lockPostMessage.Unlock()
	return mock.PostMessageFunc(ctx, channelID, threadTS, text)
}

// PostMessageCalls gets all the calls that were made to PostMessage.
// Check the length with:
//
//	len(mockedSlackClient.PostMessageCalls())
func (mock *SlackClientMock) PostMessageCalls() []struct {
	Ctx       context.Context
	ChannelID string
	ThreadTS  string
	Text      string
} {
	var calls []struct {
		Ctx       context.Context
		ChannelID string
		ThreadTS  string
		Text      string
	}
	mock.lockPostMessage.RLock()
	calls = mock.calls.PostMessage
	mock.lockPostMessage.RUnlock()
	return calls
}
