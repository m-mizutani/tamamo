// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/m-mizutani/tamamo/pkg/domain/interfaces"
	"github.com/m-mizutani/tamamo/pkg/domain/model/image"
	"github.com/m-mizutani/tamamo/pkg/domain/types"
	"sync"
)

// Ensure, that ImageUseCasesMock does implement interfaces.ImageUseCases.
// If this is not the case, regenerate this file with moq.
var _ interfaces.ImageUseCases = &ImageUseCasesMock{}

// ImageUseCasesMock is a mock implementation of interfaces.ImageUseCases.
//
//	func TestSomethingThatUsesImageUseCases(t *testing.T) {
//
//		// make and configure a mocked interfaces.ImageUseCases
//		mockedImageUseCases := &ImageUseCasesMock{
//			GetAgentImageDataFunc: func(ctx context.Context, agentID types.UUID, thumbnailSize string) (*interfaces.ImageData, error) {
//				panic("mock out the GetAgentImageData method")
//			},
//			GetAgentImageInfoFunc: func(ctx context.Context, agentID types.UUID) (*image.AgentImage, error) {
//				panic("mock out the GetAgentImageInfo method")
//			},
//			UploadAgentImageFunc: func(ctx context.Context, req *interfaces.UploadImageRequest) (*image.AgentImage, error) {
//				panic("mock out the UploadAgentImage method")
//			},
//		}
//
//		// use mockedImageUseCases in code that requires interfaces.ImageUseCases
//		// and then make assertions.
//
//	}
type ImageUseCasesMock struct {
	// GetAgentImageDataFunc mocks the GetAgentImageData method.
	GetAgentImageDataFunc func(ctx context.Context, agentID types.UUID, thumbnailSize string) (*interfaces.ImageData, error)

	// GetAgentImageInfoFunc mocks the GetAgentImageInfo method.
	GetAgentImageInfoFunc func(ctx context.Context, agentID types.UUID) (*image.AgentImage, error)

	// UploadAgentImageFunc mocks the UploadAgentImage method.
	UploadAgentImageFunc func(ctx context.Context, req *interfaces.UploadImageRequest) (*image.AgentImage, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAgentImageData holds details about calls to the GetAgentImageData method.
		GetAgentImageData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID types.UUID
			// ThumbnailSize is the thumbnailSize argument value.
			ThumbnailSize string
		}
		// GetAgentImageInfo holds details about calls to the GetAgentImageInfo method.
		GetAgentImageInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID types.UUID
		}
		// UploadAgentImage holds details about calls to the UploadAgentImage method.
		UploadAgentImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *interfaces.UploadImageRequest
		}
	}
	lockGetAgentImageData sync.RWMutex
	lockGetAgentImageInfo sync.RWMutex
	lockUploadAgentImage  sync.RWMutex
}

// GetAgentImageData calls GetAgentImageDataFunc.
func (mock *ImageUseCasesMock) GetAgentImageData(ctx context.Context, agentID types.UUID, thumbnailSize string) (*interfaces.ImageData, error) {
	if mock.GetAgentImageDataFunc == nil {
		panic("ImageUseCasesMock.GetAgentImageDataFunc: method is nil but ImageUseCases.GetAgentImageData was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		AgentID       types.UUID
		ThumbnailSize string
	}{
		Ctx:           ctx,
		AgentID:       agentID,
		ThumbnailSize: thumbnailSize,
	}
	mock.lockGetAgentImageData.Lock()
	mock.calls.GetAgentImageData = append(mock.calls.GetAgentImageData, callInfo)
	mock.lockGetAgentImageData.Unlock()
	return mock.GetAgentImageDataFunc(ctx, agentID, thumbnailSize)
}

// GetAgentImageDataCalls gets all the calls that were made to GetAgentImageData.
// Check the length with:
//
//	len(mockedImageUseCases.GetAgentImageDataCalls())
func (mock *ImageUseCasesMock) GetAgentImageDataCalls() []struct {
	Ctx           context.Context
	AgentID       types.UUID
	ThumbnailSize string
} {
	var calls []struct {
		Ctx           context.Context
		AgentID       types.UUID
		ThumbnailSize string
	}
	mock.lockGetAgentImageData.RLock()
	calls = mock.calls.GetAgentImageData
	mock.lockGetAgentImageData.RUnlock()
	return calls
}

// GetAgentImageInfo calls GetAgentImageInfoFunc.
func (mock *ImageUseCasesMock) GetAgentImageInfo(ctx context.Context, agentID types.UUID) (*image.AgentImage, error) {
	if mock.GetAgentImageInfoFunc == nil {
		panic("ImageUseCasesMock.GetAgentImageInfoFunc: method is nil but ImageUseCases.GetAgentImageInfo was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AgentID types.UUID
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	mock.lockGetAgentImageInfo.Lock()
	mock.calls.GetAgentImageInfo = append(mock.calls.GetAgentImageInfo, callInfo)
	mock.lockGetAgentImageInfo.Unlock()
	return mock.GetAgentImageInfoFunc(ctx, agentID)
}

// GetAgentImageInfoCalls gets all the calls that were made to GetAgentImageInfo.
// Check the length with:
//
//	len(mockedImageUseCases.GetAgentImageInfoCalls())
func (mock *ImageUseCasesMock) GetAgentImageInfoCalls() []struct {
	Ctx     context.Context
	AgentID types.UUID
} {
	var calls []struct {
		Ctx     context.Context
		AgentID types.UUID
	}
	mock.lockGetAgentImageInfo.RLock()
	calls = mock.calls.GetAgentImageInfo
	mock.lockGetAgentImageInfo.RUnlock()
	return calls
}

// UploadAgentImage calls UploadAgentImageFunc.
func (mock *ImageUseCasesMock) UploadAgentImage(ctx context.Context, req *interfaces.UploadImageRequest) (*image.AgentImage, error) {
	if mock.UploadAgentImageFunc == nil {
		panic("ImageUseCasesMock.UploadAgentImageFunc: method is nil but ImageUseCases.UploadAgentImage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *interfaces.UploadImageRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockUploadAgentImage.Lock()
	mock.calls.UploadAgentImage = append(mock.calls.UploadAgentImage, callInfo)
	mock.lockUploadAgentImage.Unlock()
	return mock.UploadAgentImageFunc(ctx, req)
}

// UploadAgentImageCalls gets all the calls that were made to UploadAgentImage.
// Check the length with:
//
//	len(mockedImageUseCases.UploadAgentImageCalls())
func (mock *ImageUseCasesMock) UploadAgentImageCalls() []struct {
	Ctx context.Context
	Req *interfaces.UploadImageRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *interfaces.UploadImageRequest
	}
	mock.lockUploadAgentImage.RLock()
	calls = mock.calls.UploadAgentImage
	mock.lockUploadAgentImage.RUnlock()
	return calls
}
