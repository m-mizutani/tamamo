// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/m-mizutani/tamamo/pkg/domain/interfaces"
	"github.com/m-mizutani/tamamo/pkg/domain/model/agent"
	"github.com/m-mizutani/tamamo/pkg/domain/types"
	"sync"
)

// Ensure, that AgentUseCasesMock does implement interfaces.AgentUseCases.
// If this is not the case, regenerate this file with moq.
var _ interfaces.AgentUseCases = &AgentUseCasesMock{}

// AgentUseCasesMock is a mock implementation of interfaces.AgentUseCases.
//
//	func TestSomethingThatUsesAgentUseCases(t *testing.T) {
//
//		// make and configure a mocked interfaces.AgentUseCases
//		mockedAgentUseCases := &AgentUseCasesMock{
//			CheckAgentIDAvailabilityFunc: func(ctx context.Context, agentID string) (*interfaces.AgentIDAvailability, error) {
//				panic("mock out the CheckAgentIDAvailability method")
//			},
//			CreateAgentFunc: func(ctx context.Context, req *interfaces.CreateAgentRequest) (*agent.Agent, error) {
//				panic("mock out the CreateAgent method")
//			},
//			CreateAgentVersionFunc: func(ctx context.Context, req *interfaces.CreateVersionRequest) (*agent.AgentVersion, error) {
//				panic("mock out the CreateAgentVersion method")
//			},
//			DeleteAgentFunc: func(ctx context.Context, id types.UUID) error {
//				panic("mock out the DeleteAgent method")
//			},
//			GetAgentFunc: func(ctx context.Context, id types.UUID) (*interfaces.AgentWithVersion, error) {
//				panic("mock out the GetAgent method")
//			},
//			GetAgentVersionsFunc: func(ctx context.Context, agentUUID types.UUID) ([]*agent.AgentVersion, error) {
//				panic("mock out the GetAgentVersions method")
//			},
//			ListAgentsFunc: func(ctx context.Context, offset int, limit int) (*interfaces.AgentListResponse, error) {
//				panic("mock out the ListAgents method")
//			},
//			UpdateAgentFunc: func(ctx context.Context, id types.UUID, req *interfaces.UpdateAgentRequest) (*agent.Agent, error) {
//				panic("mock out the UpdateAgent method")
//			},
//			ValidateAgentIDFunc: func(agentID string) error {
//				panic("mock out the ValidateAgentID method")
//			},
//			ValidateVersionFunc: func(version string) error {
//				panic("mock out the ValidateVersion method")
//			},
//		}
//
//		// use mockedAgentUseCases in code that requires interfaces.AgentUseCases
//		// and then make assertions.
//
//	}
type AgentUseCasesMock struct {
	// CheckAgentIDAvailabilityFunc mocks the CheckAgentIDAvailability method.
	CheckAgentIDAvailabilityFunc func(ctx context.Context, agentID string) (*interfaces.AgentIDAvailability, error)

	// CreateAgentFunc mocks the CreateAgent method.
	CreateAgentFunc func(ctx context.Context, req *interfaces.CreateAgentRequest) (*agent.Agent, error)

	// CreateAgentVersionFunc mocks the CreateAgentVersion method.
	CreateAgentVersionFunc func(ctx context.Context, req *interfaces.CreateVersionRequest) (*agent.AgentVersion, error)

	// DeleteAgentFunc mocks the DeleteAgent method.
	DeleteAgentFunc func(ctx context.Context, id types.UUID) error

	// GetAgentFunc mocks the GetAgent method.
	GetAgentFunc func(ctx context.Context, id types.UUID) (*interfaces.AgentWithVersion, error)

	// GetAgentVersionsFunc mocks the GetAgentVersions method.
	GetAgentVersionsFunc func(ctx context.Context, agentUUID types.UUID) ([]*agent.AgentVersion, error)

	// ListAgentsFunc mocks the ListAgents method.
	ListAgentsFunc func(ctx context.Context, offset int, limit int) (*interfaces.AgentListResponse, error)

	// UpdateAgentFunc mocks the UpdateAgent method.
	UpdateAgentFunc func(ctx context.Context, id types.UUID, req *interfaces.UpdateAgentRequest) (*agent.Agent, error)

	// ValidateAgentIDFunc mocks the ValidateAgentID method.
	ValidateAgentIDFunc func(agentID string) error

	// ValidateVersionFunc mocks the ValidateVersion method.
	ValidateVersionFunc func(version string) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckAgentIDAvailability holds details about calls to the CheckAgentIDAvailability method.
		CheckAgentIDAvailability []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
		}
		// CreateAgent holds details about calls to the CreateAgent method.
		CreateAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *interfaces.CreateAgentRequest
		}
		// CreateAgentVersion holds details about calls to the CreateAgentVersion method.
		CreateAgentVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *interfaces.CreateVersionRequest
		}
		// DeleteAgent holds details about calls to the DeleteAgent method.
		DeleteAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.UUID
		}
		// GetAgent holds details about calls to the GetAgent method.
		GetAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.UUID
		}
		// GetAgentVersions holds details about calls to the GetAgentVersions method.
		GetAgentVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentUUID is the agentUUID argument value.
			AgentUUID types.UUID
		}
		// ListAgents holds details about calls to the ListAgents method.
		ListAgents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// UpdateAgent holds details about calls to the UpdateAgent method.
		UpdateAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.UUID
			// Req is the req argument value.
			Req *interfaces.UpdateAgentRequest
		}
		// ValidateAgentID holds details about calls to the ValidateAgentID method.
		ValidateAgentID []struct {
			// AgentID is the agentID argument value.
			AgentID string
		}
		// ValidateVersion holds details about calls to the ValidateVersion method.
		ValidateVersion []struct {
			// Version is the version argument value.
			Version string
		}
	}
	lockCheckAgentIDAvailability sync.RWMutex
	lockCreateAgent              sync.RWMutex
	lockCreateAgentVersion       sync.RWMutex
	lockDeleteAgent              sync.RWMutex
	lockGetAgent                 sync.RWMutex
	lockGetAgentVersions         sync.RWMutex
	lockListAgents               sync.RWMutex
	lockUpdateAgent              sync.RWMutex
	lockValidateAgentID          sync.RWMutex
	lockValidateVersion          sync.RWMutex
}

// CheckAgentIDAvailability calls CheckAgentIDAvailabilityFunc.
func (mock *AgentUseCasesMock) CheckAgentIDAvailability(ctx context.Context, agentID string) (*interfaces.AgentIDAvailability, error) {
	if mock.CheckAgentIDAvailabilityFunc == nil {
		panic("AgentUseCasesMock.CheckAgentIDAvailabilityFunc: method is nil but AgentUseCases.CheckAgentIDAvailability was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AgentID string
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	mock.lockCheckAgentIDAvailability.Lock()
	mock.calls.CheckAgentIDAvailability = append(mock.calls.CheckAgentIDAvailability, callInfo)
	mock.lockCheckAgentIDAvailability.Unlock()
	return mock.CheckAgentIDAvailabilityFunc(ctx, agentID)
}

// CheckAgentIDAvailabilityCalls gets all the calls that were made to CheckAgentIDAvailability.
// Check the length with:
//
//	len(mockedAgentUseCases.CheckAgentIDAvailabilityCalls())
func (mock *AgentUseCasesMock) CheckAgentIDAvailabilityCalls() []struct {
	Ctx     context.Context
	AgentID string
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
	}
	mock.lockCheckAgentIDAvailability.RLock()
	calls = mock.calls.CheckAgentIDAvailability
	mock.lockCheckAgentIDAvailability.RUnlock()
	return calls
}

// CreateAgent calls CreateAgentFunc.
func (mock *AgentUseCasesMock) CreateAgent(ctx context.Context, req *interfaces.CreateAgentRequest) (*agent.Agent, error) {
	if mock.CreateAgentFunc == nil {
		panic("AgentUseCasesMock.CreateAgentFunc: method is nil but AgentUseCases.CreateAgent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *interfaces.CreateAgentRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateAgent.Lock()
	mock.calls.CreateAgent = append(mock.calls.CreateAgent, callInfo)
	mock.lockCreateAgent.Unlock()
	return mock.CreateAgentFunc(ctx, req)
}

// CreateAgentCalls gets all the calls that were made to CreateAgent.
// Check the length with:
//
//	len(mockedAgentUseCases.CreateAgentCalls())
func (mock *AgentUseCasesMock) CreateAgentCalls() []struct {
	Ctx context.Context
	Req *interfaces.CreateAgentRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *interfaces.CreateAgentRequest
	}
	mock.lockCreateAgent.RLock()
	calls = mock.calls.CreateAgent
	mock.lockCreateAgent.RUnlock()
	return calls
}

// CreateAgentVersion calls CreateAgentVersionFunc.
func (mock *AgentUseCasesMock) CreateAgentVersion(ctx context.Context, req *interfaces.CreateVersionRequest) (*agent.AgentVersion, error) {
	if mock.CreateAgentVersionFunc == nil {
		panic("AgentUseCasesMock.CreateAgentVersionFunc: method is nil but AgentUseCases.CreateAgentVersion was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *interfaces.CreateVersionRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreateAgentVersion.Lock()
	mock.calls.CreateAgentVersion = append(mock.calls.CreateAgentVersion, callInfo)
	mock.lockCreateAgentVersion.Unlock()
	return mock.CreateAgentVersionFunc(ctx, req)
}

// CreateAgentVersionCalls gets all the calls that were made to CreateAgentVersion.
// Check the length with:
//
//	len(mockedAgentUseCases.CreateAgentVersionCalls())
func (mock *AgentUseCasesMock) CreateAgentVersionCalls() []struct {
	Ctx context.Context
	Req *interfaces.CreateVersionRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *interfaces.CreateVersionRequest
	}
	mock.lockCreateAgentVersion.RLock()
	calls = mock.calls.CreateAgentVersion
	mock.lockCreateAgentVersion.RUnlock()
	return calls
}

// DeleteAgent calls DeleteAgentFunc.
func (mock *AgentUseCasesMock) DeleteAgent(ctx context.Context, id types.UUID) error {
	if mock.DeleteAgentFunc == nil {
		panic("AgentUseCasesMock.DeleteAgentFunc: method is nil but AgentUseCases.DeleteAgent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAgent.Lock()
	mock.calls.DeleteAgent = append(mock.calls.DeleteAgent, callInfo)
	mock.lockDeleteAgent.Unlock()
	return mock.DeleteAgentFunc(ctx, id)
}

// DeleteAgentCalls gets all the calls that were made to DeleteAgent.
// Check the length with:
//
//	len(mockedAgentUseCases.DeleteAgentCalls())
func (mock *AgentUseCasesMock) DeleteAgentCalls() []struct {
	Ctx context.Context
	ID  types.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.UUID
	}
	mock.lockDeleteAgent.RLock()
	calls = mock.calls.DeleteAgent
	mock.lockDeleteAgent.RUnlock()
	return calls
}

// GetAgent calls GetAgentFunc.
func (mock *AgentUseCasesMock) GetAgent(ctx context.Context, id types.UUID) (*interfaces.AgentWithVersion, error) {
	if mock.GetAgentFunc == nil {
		panic("AgentUseCasesMock.GetAgentFunc: method is nil but AgentUseCases.GetAgent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAgent.Lock()
	mock.calls.GetAgent = append(mock.calls.GetAgent, callInfo)
	mock.lockGetAgent.Unlock()
	return mock.GetAgentFunc(ctx, id)
}

// GetAgentCalls gets all the calls that were made to GetAgent.
// Check the length with:
//
//	len(mockedAgentUseCases.GetAgentCalls())
func (mock *AgentUseCasesMock) GetAgentCalls() []struct {
	Ctx context.Context
	ID  types.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.UUID
	}
	mock.lockGetAgent.RLock()
	calls = mock.calls.GetAgent
	mock.lockGetAgent.RUnlock()
	return calls
}

// GetAgentVersions calls GetAgentVersionsFunc.
func (mock *AgentUseCasesMock) GetAgentVersions(ctx context.Context, agentUUID types.UUID) ([]*agent.AgentVersion, error) {
	if mock.GetAgentVersionsFunc == nil {
		panic("AgentUseCasesMock.GetAgentVersionsFunc: method is nil but AgentUseCases.GetAgentVersions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AgentUUID types.UUID
	}{
		Ctx:       ctx,
		AgentUUID: agentUUID,
	}
	mock.lockGetAgentVersions.Lock()
	mock.calls.GetAgentVersions = append(mock.calls.GetAgentVersions, callInfo)
	mock.lockGetAgentVersions.Unlock()
	return mock.GetAgentVersionsFunc(ctx, agentUUID)
}

// GetAgentVersionsCalls gets all the calls that were made to GetAgentVersions.
// Check the length with:
//
//	len(mockedAgentUseCases.GetAgentVersionsCalls())
func (mock *AgentUseCasesMock) GetAgentVersionsCalls() []struct {
	Ctx       context.Context
	AgentUUID types.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AgentUUID types.UUID
	}
	mock.lockGetAgentVersions.RLock()
	calls = mock.calls.GetAgentVersions
	mock.lockGetAgentVersions.RUnlock()
	return calls
}

// ListAgents calls ListAgentsFunc.
func (mock *AgentUseCasesMock) ListAgents(ctx context.Context, offset int, limit int) (*interfaces.AgentListResponse, error) {
	if mock.ListAgentsFunc == nil {
		panic("AgentUseCasesMock.ListAgentsFunc: method is nil but AgentUseCases.ListAgents was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}{
		Ctx:    ctx,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockListAgents.Lock()
	mock.calls.ListAgents = append(mock.calls.ListAgents, callInfo)
	mock.lockListAgents.Unlock()
	return mock.ListAgentsFunc(ctx, offset, limit)
}

// ListAgentsCalls gets all the calls that were made to ListAgents.
// Check the length with:
//
//	len(mockedAgentUseCases.ListAgentsCalls())
func (mock *AgentUseCasesMock) ListAgentsCalls() []struct {
	Ctx    context.Context
	Offset int
	Limit  int
} {
	var calls []struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}
	mock.lockListAgents.RLock()
	calls = mock.calls.ListAgents
	mock.lockListAgents.RUnlock()
	return calls
}

// UpdateAgent calls UpdateAgentFunc.
func (mock *AgentUseCasesMock) UpdateAgent(ctx context.Context, id types.UUID, req *interfaces.UpdateAgentRequest) (*agent.Agent, error) {
	if mock.UpdateAgentFunc == nil {
		panic("AgentUseCasesMock.UpdateAgentFunc: method is nil but AgentUseCases.UpdateAgent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.UUID
		Req *interfaces.UpdateAgentRequest
	}{
		Ctx: ctx,
		ID:  id,
		Req: req,
	}
	mock.lockUpdateAgent.Lock()
	mock.calls.UpdateAgent = append(mock.calls.UpdateAgent, callInfo)
	mock.lockUpdateAgent.Unlock()
	return mock.UpdateAgentFunc(ctx, id, req)
}

// UpdateAgentCalls gets all the calls that were made to UpdateAgent.
// Check the length with:
//
//	len(mockedAgentUseCases.UpdateAgentCalls())
func (mock *AgentUseCasesMock) UpdateAgentCalls() []struct {
	Ctx context.Context
	ID  types.UUID
	Req *interfaces.UpdateAgentRequest
} {
	var calls []struct {
		Ctx context.Context
		ID  types.UUID
		Req *interfaces.UpdateAgentRequest
	}
	mock.lockUpdateAgent.RLock()
	calls = mock.calls.UpdateAgent
	mock.lockUpdateAgent.RUnlock()
	return calls
}

// ValidateAgentID calls ValidateAgentIDFunc.
func (mock *AgentUseCasesMock) ValidateAgentID(agentID string) error {
	if mock.ValidateAgentIDFunc == nil {
		panic("AgentUseCasesMock.ValidateAgentIDFunc: method is nil but AgentUseCases.ValidateAgentID was just called")
	}
	callInfo := struct {
		AgentID string
	}{
		AgentID: agentID,
	}
	mock.lockValidateAgentID.Lock()
	mock.calls.ValidateAgentID = append(mock.calls.ValidateAgentID, callInfo)
	mock.lockValidateAgentID.Unlock()
	return mock.ValidateAgentIDFunc(agentID)
}

// ValidateAgentIDCalls gets all the calls that were made to ValidateAgentID.
// Check the length with:
//
//	len(mockedAgentUseCases.ValidateAgentIDCalls())
func (mock *AgentUseCasesMock) ValidateAgentIDCalls() []struct {
	AgentID string
} {
	var calls []struct {
		AgentID string
	}
	mock.lockValidateAgentID.RLock()
	calls = mock.calls.ValidateAgentID
	mock.lockValidateAgentID.RUnlock()
	return calls
}

// ValidateVersion calls ValidateVersionFunc.
func (mock *AgentUseCasesMock) ValidateVersion(version string) error {
	if mock.ValidateVersionFunc == nil {
		panic("AgentUseCasesMock.ValidateVersionFunc: method is nil but AgentUseCases.ValidateVersion was just called")
	}
	callInfo := struct {
		Version string
	}{
		Version: version,
	}
	mock.lockValidateVersion.Lock()
	mock.calls.ValidateVersion = append(mock.calls.ValidateVersion, callInfo)
	mock.lockValidateVersion.Unlock()
	return mock.ValidateVersionFunc(version)
}

// ValidateVersionCalls gets all the calls that were made to ValidateVersion.
// Check the length with:
//
//	len(mockedAgentUseCases.ValidateVersionCalls())
func (mock *AgentUseCasesMock) ValidateVersionCalls() []struct {
	Version string
} {
	var calls []struct {
		Version string
	}
	mock.lockValidateVersion.RLock()
	calls = mock.calls.ValidateVersion
	mock.lockValidateVersion.RUnlock()
	return calls
}

// Ensure, that AgentRepositoryMock does implement interfaces.AgentRepository.
// If this is not the case, regenerate this file with moq.
var _ interfaces.AgentRepository = &AgentRepositoryMock{}

// AgentRepositoryMock is a mock implementation of interfaces.AgentRepository.
//
//	func TestSomethingThatUsesAgentRepository(t *testing.T) {
//
//		// make and configure a mocked interfaces.AgentRepository
//		mockedAgentRepository := &AgentRepositoryMock{
//			AgentIDExistsFunc: func(ctx context.Context, agentID string) (bool, error) {
//				panic("mock out the AgentIDExists method")
//			},
//			CreateAgentFunc: func(ctx context.Context, agentMoqParam *agent.Agent) error {
//				panic("mock out the CreateAgent method")
//			},
//			CreateAgentVersionFunc: func(ctx context.Context, version *agent.AgentVersion) error {
//				panic("mock out the CreateAgentVersion method")
//			},
//			DeleteAgentFunc: func(ctx context.Context, id types.UUID) error {
//				panic("mock out the DeleteAgent method")
//			},
//			GetAgentFunc: func(ctx context.Context, id types.UUID) (*agent.Agent, error) {
//				panic("mock out the GetAgent method")
//			},
//			GetAgentByAgentIDFunc: func(ctx context.Context, agentID string) (*agent.Agent, error) {
//				panic("mock out the GetAgentByAgentID method")
//			},
//			GetAgentVersionFunc: func(ctx context.Context, agentUUID types.UUID, version string) (*agent.AgentVersion, error) {
//				panic("mock out the GetAgentVersion method")
//			},
//			GetLatestAgentVersionFunc: func(ctx context.Context, agentUUID types.UUID) (*agent.AgentVersion, error) {
//				panic("mock out the GetLatestAgentVersion method")
//			},
//			ListAgentVersionsFunc: func(ctx context.Context, agentUUID types.UUID) ([]*agent.AgentVersion, error) {
//				panic("mock out the ListAgentVersions method")
//			},
//			ListAgentsFunc: func(ctx context.Context, offset int, limit int) ([]*agent.Agent, int, error) {
//				panic("mock out the ListAgents method")
//			},
//			UpdateAgentFunc: func(ctx context.Context, agentMoqParam *agent.Agent) error {
//				panic("mock out the UpdateAgent method")
//			},
//			UpdateAgentVersionFunc: func(ctx context.Context, version *agent.AgentVersion) error {
//				panic("mock out the UpdateAgentVersion method")
//			},
//		}
//
//		// use mockedAgentRepository in code that requires interfaces.AgentRepository
//		// and then make assertions.
//
//	}
type AgentRepositoryMock struct {
	// AgentIDExistsFunc mocks the AgentIDExists method.
	AgentIDExistsFunc func(ctx context.Context, agentID string) (bool, error)

	// CreateAgentFunc mocks the CreateAgent method.
	CreateAgentFunc func(ctx context.Context, agentMoqParam *agent.Agent) error

	// CreateAgentVersionFunc mocks the CreateAgentVersion method.
	CreateAgentVersionFunc func(ctx context.Context, version *agent.AgentVersion) error

	// DeleteAgentFunc mocks the DeleteAgent method.
	DeleteAgentFunc func(ctx context.Context, id types.UUID) error

	// GetAgentFunc mocks the GetAgent method.
	GetAgentFunc func(ctx context.Context, id types.UUID) (*agent.Agent, error)

	// GetAgentByAgentIDFunc mocks the GetAgentByAgentID method.
	GetAgentByAgentIDFunc func(ctx context.Context, agentID string) (*agent.Agent, error)

	// GetAgentVersionFunc mocks the GetAgentVersion method.
	GetAgentVersionFunc func(ctx context.Context, agentUUID types.UUID, version string) (*agent.AgentVersion, error)

	// GetLatestAgentVersionFunc mocks the GetLatestAgentVersion method.
	GetLatestAgentVersionFunc func(ctx context.Context, agentUUID types.UUID) (*agent.AgentVersion, error)

	// ListAgentVersionsFunc mocks the ListAgentVersions method.
	ListAgentVersionsFunc func(ctx context.Context, agentUUID types.UUID) ([]*agent.AgentVersion, error)

	// ListAgentsFunc mocks the ListAgents method.
	ListAgentsFunc func(ctx context.Context, offset int, limit int) ([]*agent.Agent, int, error)

	// UpdateAgentFunc mocks the UpdateAgent method.
	UpdateAgentFunc func(ctx context.Context, agentMoqParam *agent.Agent) error

	// UpdateAgentVersionFunc mocks the UpdateAgentVersion method.
	UpdateAgentVersionFunc func(ctx context.Context, version *agent.AgentVersion) error

	// calls tracks calls to the methods.
	calls struct {
		// AgentIDExists holds details about calls to the AgentIDExists method.
		AgentIDExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
		}
		// CreateAgent holds details about calls to the CreateAgent method.
		CreateAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentMoqParam is the agentMoqParam argument value.
			AgentMoqParam *agent.Agent
		}
		// CreateAgentVersion holds details about calls to the CreateAgentVersion method.
		CreateAgentVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Version is the version argument value.
			Version *agent.AgentVersion
		}
		// DeleteAgent holds details about calls to the DeleteAgent method.
		DeleteAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.UUID
		}
		// GetAgent holds details about calls to the GetAgent method.
		GetAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID types.UUID
		}
		// GetAgentByAgentID holds details about calls to the GetAgentByAgentID method.
		GetAgentByAgentID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
		}
		// GetAgentVersion holds details about calls to the GetAgentVersion method.
		GetAgentVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentUUID is the agentUUID argument value.
			AgentUUID types.UUID
			// Version is the version argument value.
			Version string
		}
		// GetLatestAgentVersion holds details about calls to the GetLatestAgentVersion method.
		GetLatestAgentVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentUUID is the agentUUID argument value.
			AgentUUID types.UUID
		}
		// ListAgentVersions holds details about calls to the ListAgentVersions method.
		ListAgentVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentUUID is the agentUUID argument value.
			AgentUUID types.UUID
		}
		// ListAgents holds details about calls to the ListAgents method.
		ListAgents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// UpdateAgent holds details about calls to the UpdateAgent method.
		UpdateAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentMoqParam is the agentMoqParam argument value.
			AgentMoqParam *agent.Agent
		}
		// UpdateAgentVersion holds details about calls to the UpdateAgentVersion method.
		UpdateAgentVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Version is the version argument value.
			Version *agent.AgentVersion
		}
	}
	lockAgentIDExists         sync.RWMutex
	lockCreateAgent           sync.RWMutex
	lockCreateAgentVersion    sync.RWMutex
	lockDeleteAgent           sync.RWMutex
	lockGetAgent              sync.RWMutex
	lockGetAgentByAgentID     sync.RWMutex
	lockGetAgentVersion       sync.RWMutex
	lockGetLatestAgentVersion sync.RWMutex
	lockListAgentVersions     sync.RWMutex
	lockListAgents            sync.RWMutex
	lockUpdateAgent           sync.RWMutex
	lockUpdateAgentVersion    sync.RWMutex
}

// AgentIDExists calls AgentIDExistsFunc.
func (mock *AgentRepositoryMock) AgentIDExists(ctx context.Context, agentID string) (bool, error) {
	if mock.AgentIDExistsFunc == nil {
		panic("AgentRepositoryMock.AgentIDExistsFunc: method is nil but AgentRepository.AgentIDExists was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AgentID string
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	mock.lockAgentIDExists.Lock()
	mock.calls.AgentIDExists = append(mock.calls.AgentIDExists, callInfo)
	mock.lockAgentIDExists.Unlock()
	return mock.AgentIDExistsFunc(ctx, agentID)
}

// AgentIDExistsCalls gets all the calls that were made to AgentIDExists.
// Check the length with:
//
//	len(mockedAgentRepository.AgentIDExistsCalls())
func (mock *AgentRepositoryMock) AgentIDExistsCalls() []struct {
	Ctx     context.Context
	AgentID string
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
	}
	mock.lockAgentIDExists.RLock()
	calls = mock.calls.AgentIDExists
	mock.lockAgentIDExists.RUnlock()
	return calls
}

// CreateAgent calls CreateAgentFunc.
func (mock *AgentRepositoryMock) CreateAgent(ctx context.Context, agentMoqParam *agent.Agent) error {
	if mock.CreateAgentFunc == nil {
		panic("AgentRepositoryMock.CreateAgentFunc: method is nil but AgentRepository.CreateAgent was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		AgentMoqParam *agent.Agent
	}{
		Ctx:           ctx,
		AgentMoqParam: agentMoqParam,
	}
	mock.lockCreateAgent.Lock()
	mock.calls.CreateAgent = append(mock.calls.CreateAgent, callInfo)
	mock.lockCreateAgent.Unlock()
	return mock.CreateAgentFunc(ctx, agentMoqParam)
}

// CreateAgentCalls gets all the calls that were made to CreateAgent.
// Check the length with:
//
//	len(mockedAgentRepository.CreateAgentCalls())
func (mock *AgentRepositoryMock) CreateAgentCalls() []struct {
	Ctx           context.Context
	AgentMoqParam *agent.Agent
} {
	var calls []struct {
		Ctx           context.Context
		AgentMoqParam *agent.Agent
	}
	mock.lockCreateAgent.RLock()
	calls = mock.calls.CreateAgent
	mock.lockCreateAgent.RUnlock()
	return calls
}

// CreateAgentVersion calls CreateAgentVersionFunc.
func (mock *AgentRepositoryMock) CreateAgentVersion(ctx context.Context, version *agent.AgentVersion) error {
	if mock.CreateAgentVersionFunc == nil {
		panic("AgentRepositoryMock.CreateAgentVersionFunc: method is nil but AgentRepository.CreateAgentVersion was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Version *agent.AgentVersion
	}{
		Ctx:     ctx,
		Version: version,
	}
	mock.lockCreateAgentVersion.Lock()
	mock.calls.CreateAgentVersion = append(mock.calls.CreateAgentVersion, callInfo)
	mock.lockCreateAgentVersion.Unlock()
	return mock.CreateAgentVersionFunc(ctx, version)
}

// CreateAgentVersionCalls gets all the calls that were made to CreateAgentVersion.
// Check the length with:
//
//	len(mockedAgentRepository.CreateAgentVersionCalls())
func (mock *AgentRepositoryMock) CreateAgentVersionCalls() []struct {
	Ctx     context.Context
	Version *agent.AgentVersion
} {
	var calls []struct {
		Ctx     context.Context
		Version *agent.AgentVersion
	}
	mock.lockCreateAgentVersion.RLock()
	calls = mock.calls.CreateAgentVersion
	mock.lockCreateAgentVersion.RUnlock()
	return calls
}

// DeleteAgent calls DeleteAgentFunc.
func (mock *AgentRepositoryMock) DeleteAgent(ctx context.Context, id types.UUID) error {
	if mock.DeleteAgentFunc == nil {
		panic("AgentRepositoryMock.DeleteAgentFunc: method is nil but AgentRepository.DeleteAgent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAgent.Lock()
	mock.calls.DeleteAgent = append(mock.calls.DeleteAgent, callInfo)
	mock.lockDeleteAgent.Unlock()
	return mock.DeleteAgentFunc(ctx, id)
}

// DeleteAgentCalls gets all the calls that were made to DeleteAgent.
// Check the length with:
//
//	len(mockedAgentRepository.DeleteAgentCalls())
func (mock *AgentRepositoryMock) DeleteAgentCalls() []struct {
	Ctx context.Context
	ID  types.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.UUID
	}
	mock.lockDeleteAgent.RLock()
	calls = mock.calls.DeleteAgent
	mock.lockDeleteAgent.RUnlock()
	return calls
}

// GetAgent calls GetAgentFunc.
func (mock *AgentRepositoryMock) GetAgent(ctx context.Context, id types.UUID) (*agent.Agent, error) {
	if mock.GetAgentFunc == nil {
		panic("AgentRepositoryMock.GetAgentFunc: method is nil but AgentRepository.GetAgent was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  types.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetAgent.Lock()
	mock.calls.GetAgent = append(mock.calls.GetAgent, callInfo)
	mock.lockGetAgent.Unlock()
	return mock.GetAgentFunc(ctx, id)
}

// GetAgentCalls gets all the calls that were made to GetAgent.
// Check the length with:
//
//	len(mockedAgentRepository.GetAgentCalls())
func (mock *AgentRepositoryMock) GetAgentCalls() []struct {
	Ctx context.Context
	ID  types.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  types.UUID
	}
	mock.lockGetAgent.RLock()
	calls = mock.calls.GetAgent
	mock.lockGetAgent.RUnlock()
	return calls
}

// GetAgentByAgentID calls GetAgentByAgentIDFunc.
func (mock *AgentRepositoryMock) GetAgentByAgentID(ctx context.Context, agentID string) (*agent.Agent, error) {
	if mock.GetAgentByAgentIDFunc == nil {
		panic("AgentRepositoryMock.GetAgentByAgentIDFunc: method is nil but AgentRepository.GetAgentByAgentID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		AgentID string
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	mock.lockGetAgentByAgentID.Lock()
	mock.calls.GetAgentByAgentID = append(mock.calls.GetAgentByAgentID, callInfo)
	mock.lockGetAgentByAgentID.Unlock()
	return mock.GetAgentByAgentIDFunc(ctx, agentID)
}

// GetAgentByAgentIDCalls gets all the calls that were made to GetAgentByAgentID.
// Check the length with:
//
//	len(mockedAgentRepository.GetAgentByAgentIDCalls())
func (mock *AgentRepositoryMock) GetAgentByAgentIDCalls() []struct {
	Ctx     context.Context
	AgentID string
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
	}
	mock.lockGetAgentByAgentID.RLock()
	calls = mock.calls.GetAgentByAgentID
	mock.lockGetAgentByAgentID.RUnlock()
	return calls
}

// GetAgentVersion calls GetAgentVersionFunc.
func (mock *AgentRepositoryMock) GetAgentVersion(ctx context.Context, agentUUID types.UUID, version string) (*agent.AgentVersion, error) {
	if mock.GetAgentVersionFunc == nil {
		panic("AgentRepositoryMock.GetAgentVersionFunc: method is nil but AgentRepository.GetAgentVersion was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AgentUUID types.UUID
		Version   string
	}{
		Ctx:       ctx,
		AgentUUID: agentUUID,
		Version:   version,
	}
	mock.lockGetAgentVersion.Lock()
	mock.calls.GetAgentVersion = append(mock.calls.GetAgentVersion, callInfo)
	mock.lockGetAgentVersion.Unlock()
	return mock.GetAgentVersionFunc(ctx, agentUUID, version)
}

// GetAgentVersionCalls gets all the calls that were made to GetAgentVersion.
// Check the length with:
//
//	len(mockedAgentRepository.GetAgentVersionCalls())
func (mock *AgentRepositoryMock) GetAgentVersionCalls() []struct {
	Ctx       context.Context
	AgentUUID types.UUID
	Version   string
} {
	var calls []struct {
		Ctx       context.Context
		AgentUUID types.UUID
		Version   string
	}
	mock.lockGetAgentVersion.RLock()
	calls = mock.calls.GetAgentVersion
	mock.lockGetAgentVersion.RUnlock()
	return calls
}

// GetLatestAgentVersion calls GetLatestAgentVersionFunc.
func (mock *AgentRepositoryMock) GetLatestAgentVersion(ctx context.Context, agentUUID types.UUID) (*agent.AgentVersion, error) {
	if mock.GetLatestAgentVersionFunc == nil {
		panic("AgentRepositoryMock.GetLatestAgentVersionFunc: method is nil but AgentRepository.GetLatestAgentVersion was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AgentUUID types.UUID
	}{
		Ctx:       ctx,
		AgentUUID: agentUUID,
	}
	mock.lockGetLatestAgentVersion.Lock()
	mock.calls.GetLatestAgentVersion = append(mock.calls.GetLatestAgentVersion, callInfo)
	mock.lockGetLatestAgentVersion.Unlock()
	return mock.GetLatestAgentVersionFunc(ctx, agentUUID)
}

// GetLatestAgentVersionCalls gets all the calls that were made to GetLatestAgentVersion.
// Check the length with:
//
//	len(mockedAgentRepository.GetLatestAgentVersionCalls())
func (mock *AgentRepositoryMock) GetLatestAgentVersionCalls() []struct {
	Ctx       context.Context
	AgentUUID types.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AgentUUID types.UUID
	}
	mock.lockGetLatestAgentVersion.RLock()
	calls = mock.calls.GetLatestAgentVersion
	mock.lockGetLatestAgentVersion.RUnlock()
	return calls
}

// ListAgentVersions calls ListAgentVersionsFunc.
func (mock *AgentRepositoryMock) ListAgentVersions(ctx context.Context, agentUUID types.UUID) ([]*agent.AgentVersion, error) {
	if mock.ListAgentVersionsFunc == nil {
		panic("AgentRepositoryMock.ListAgentVersionsFunc: method is nil but AgentRepository.ListAgentVersions was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AgentUUID types.UUID
	}{
		Ctx:       ctx,
		AgentUUID: agentUUID,
	}
	mock.lockListAgentVersions.Lock()
	mock.calls.ListAgentVersions = append(mock.calls.ListAgentVersions, callInfo)
	mock.lockListAgentVersions.Unlock()
	return mock.ListAgentVersionsFunc(ctx, agentUUID)
}

// ListAgentVersionsCalls gets all the calls that were made to ListAgentVersions.
// Check the length with:
//
//	len(mockedAgentRepository.ListAgentVersionsCalls())
func (mock *AgentRepositoryMock) ListAgentVersionsCalls() []struct {
	Ctx       context.Context
	AgentUUID types.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AgentUUID types.UUID
	}
	mock.lockListAgentVersions.RLock()
	calls = mock.calls.ListAgentVersions
	mock.lockListAgentVersions.RUnlock()
	return calls
}

// ListAgents calls ListAgentsFunc.
func (mock *AgentRepositoryMock) ListAgents(ctx context.Context, offset int, limit int) ([]*agent.Agent, int, error) {
	if mock.ListAgentsFunc == nil {
		panic("AgentRepositoryMock.ListAgentsFunc: method is nil but AgentRepository.ListAgents was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}{
		Ctx:    ctx,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockListAgents.Lock()
	mock.calls.ListAgents = append(mock.calls.ListAgents, callInfo)
	mock.lockListAgents.Unlock()
	return mock.ListAgentsFunc(ctx, offset, limit)
}

// ListAgentsCalls gets all the calls that were made to ListAgents.
// Check the length with:
//
//	len(mockedAgentRepository.ListAgentsCalls())
func (mock *AgentRepositoryMock) ListAgentsCalls() []struct {
	Ctx    context.Context
	Offset int
	Limit  int
} {
	var calls []struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}
	mock.lockListAgents.RLock()
	calls = mock.calls.ListAgents
	mock.lockListAgents.RUnlock()
	return calls
}

// UpdateAgent calls UpdateAgentFunc.
func (mock *AgentRepositoryMock) UpdateAgent(ctx context.Context, agentMoqParam *agent.Agent) error {
	if mock.UpdateAgentFunc == nil {
		panic("AgentRepositoryMock.UpdateAgentFunc: method is nil but AgentRepository.UpdateAgent was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		AgentMoqParam *agent.Agent
	}{
		Ctx:           ctx,
		AgentMoqParam: agentMoqParam,
	}
	mock.lockUpdateAgent.Lock()
	mock.calls.UpdateAgent = append(mock.calls.UpdateAgent, callInfo)
	mock.lockUpdateAgent.Unlock()
	return mock.UpdateAgentFunc(ctx, agentMoqParam)
}

// UpdateAgentCalls gets all the calls that were made to UpdateAgent.
// Check the length with:
//
//	len(mockedAgentRepository.UpdateAgentCalls())
func (mock *AgentRepositoryMock) UpdateAgentCalls() []struct {
	Ctx           context.Context
	AgentMoqParam *agent.Agent
} {
	var calls []struct {
		Ctx           context.Context
		AgentMoqParam *agent.Agent
	}
	mock.lockUpdateAgent.RLock()
	calls = mock.calls.UpdateAgent
	mock.lockUpdateAgent.RUnlock()
	return calls
}

// UpdateAgentVersion calls UpdateAgentVersionFunc.
func (mock *AgentRepositoryMock) UpdateAgentVersion(ctx context.Context, version *agent.AgentVersion) error {
	if mock.UpdateAgentVersionFunc == nil {
		panic("AgentRepositoryMock.UpdateAgentVersionFunc: method is nil but AgentRepository.UpdateAgentVersion was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Version *agent.AgentVersion
	}{
		Ctx:     ctx,
		Version: version,
	}
	mock.lockUpdateAgentVersion.Lock()
	mock.calls.UpdateAgentVersion = append(mock.calls.UpdateAgentVersion, callInfo)
	mock.lockUpdateAgentVersion.Unlock()
	return mock.UpdateAgentVersionFunc(ctx, version)
}

// UpdateAgentVersionCalls gets all the calls that were made to UpdateAgentVersion.
// Check the length with:
//
//	len(mockedAgentRepository.UpdateAgentVersionCalls())
func (mock *AgentRepositoryMock) UpdateAgentVersionCalls() []struct {
	Ctx     context.Context
	Version *agent.AgentVersion
} {
	var calls []struct {
		Ctx     context.Context
		Version *agent.AgentVersion
	}
	mock.lockUpdateAgentVersion.RLock()
	calls = mock.calls.UpdateAgentVersion
	mock.lockUpdateAgentVersion.RUnlock()
	return calls
}
