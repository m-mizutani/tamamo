package slack

import (
	"time"

	"github.com/m-mizutani/tamamo/pkg/domain/types"
)

// ChannelType represents the type of Slack channel
type ChannelType string

const (
	ChannelTypePublic  ChannelType = "public"
	ChannelTypePrivate ChannelType = "private"
	ChannelTypeIM      ChannelType = "im"
	ChannelTypeMPIM    ChannelType = "mpim"
)

// MessageType represents the type of message sender
type MessageType string

const (
	MessageTypeUser   MessageType = "user"
	MessageTypeBot    MessageType = "bot"
	MessageTypeSystem MessageType = "system"
)

// Attachment represents a Slack message attachment
type Attachment struct {
	ID       string `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
	Mimetype string `json:"mimetype,omitempty"`
	FileType string `json:"filetype,omitempty"`
	URL      string `json:"url,omitempty"`
}

// SlackMessageLog represents a comprehensive log entry for Slack messages
// This is separate from the existing Message struct used for thread management
type SlackMessageLog struct {
	// Unique identifier (UUID generated by tamamo)
	ID types.MessageID `json:"id"`

	// Slack identifiers
	TeamID    string `json:"team_id"`
	ChannelID string `json:"channel_id"`
	Timestamp string `json:"timestamp"` // Slack's message timestamp

	// Channel information
	ChannelName string      `json:"channel_name"`
	ChannelType ChannelType `json:"channel_type"`

	// Message sender information
	UserID      string      `json:"user_id"`
	UserName    string      `json:"user_name,omitempty"`
	BotID       string      `json:"bot_id,omitempty"`
	MessageType MessageType `json:"message_type"`

	// Message content
	Text        string       `json:"text"`
	ThreadTS    string       `json:"thread_ts,omitempty"`
	Attachments []Attachment `json:"attachments,omitempty"`

	// Metadata
	CreatedAt time.Time `json:"created_at"`
}

// ChannelInfo represents cached channel information from Slack API
type ChannelInfo struct {
	ID        string      `json:"id"`
	Name      string      `json:"name"`
	Type      ChannelType `json:"type"`
	IsPrivate bool        `json:"is_private"`
	UpdatedAt time.Time   `json:"updated_at"`
}

// DetermineChannelType converts Slack API response to ChannelType
func DetermineChannelType(isChannel, isGroup, isIM, isMPIM bool) ChannelType {
	switch {
	case isIM:
		return ChannelTypeIM
	case isMPIM:
		return ChannelTypeMPIM
	case isGroup:
		return ChannelTypePrivate
	case isChannel:
		return ChannelTypePublic
	default:
		return ChannelTypePublic // Default fallback
	}
}

// DetermineMessageType determines message type based on user and bot information
func DetermineMessageType(userID, botID string) MessageType {
	switch {
	case botID != "":
		return MessageTypeBot
	case userID != "":
		return MessageTypeUser
	default:
		return MessageTypeSystem
	}
}
