package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"time"

	goerr "github.com/m-mizutani/goerr/v2"
	graphql1 "github.com/m-mizutani/tamamo/pkg/domain/model/graphql"
	"github.com/m-mizutani/tamamo/pkg/domain/model/slack"
	"github.com/m-mizutani/tamamo/pkg/domain/types"
)

// Thread is the resolver for the thread field.
func (r *queryResolver) Thread(ctx context.Context, id string) (*slack.Thread, error) {
	threadID := types.ThreadID(id)
	if !threadID.IsValid() {
		return nil, goerr.New("invalid thread ID")
	}

	thread, err := r.threadRepo.GetThread(ctx, threadID)
	if err != nil {
		return nil, goerr.Wrap(err, "failed to get thread")
	}

	return thread, nil
}

// Threads is the resolver for the threads field.
func (r *queryResolver) Threads(ctx context.Context, offset *int, limit *int) (*graphql1.ThreadsResponse, error) {
	// TODO: Implement thread listing functionality
	// Currently ThreadRepository doesn't have a list method
	// This is a placeholder implementation
	return &graphql1.ThreadsResponse{
		Threads:    []*slack.Thread{},
		TotalCount: 0,
	}, nil
}

// ID is the resolver for the id field.
func (r *threadResolver) ID(ctx context.Context, obj *slack.Thread) (string, error) {
	return string(obj.ID), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *threadResolver) CreatedAt(ctx context.Context, obj *slack.Thread) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *threadResolver) UpdatedAt(ctx context.Context, obj *slack.Thread) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Thread returns ThreadResolver implementation.
func (r *Resolver) Thread() ThreadResolver { return &threadResolver{r} }

type queryResolver struct{ *Resolver }
type threadResolver struct{ *Resolver }
